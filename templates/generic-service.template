{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This Generic Software  workload template deploys an ASG behind an ELB load balancer in two private subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. QS()",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "BastionSecurityGroupID",
                        "GenericSoftwareInstanceType"
                    ]
                },

                {
                    "Label": {
                        "default": "Generic Software Nodes Configuration"
                    },
                    "Parameters": [
                        "GenericSoftwareNodesMinSize",
                        "GenericSoftwareNodesMaxSize",
                        "GenericSoftwareNodesDesiredCapacity",
                        "OperatorEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Generic Software Storage Configuration"
                    },
                    "Parameters": [
                        "S3BucketName"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "GenericSoftwareInstanceType": {
                    "default": "Generic Software Servers Instance Type"
                },
                "GenericSoftwareNodesDesiredCapacity": {
                    "default": "Generic Software Nodes Desired Capacity"
                },
                "GenericSoftwareNodesMaxSize": {
                    "default": "Generic Software Nodes Max Size"
                },
                "GenericSoftwareNodesMinSize": {
                    "default": "Generic Software Nodes Min Size"
                },

                "BastionSecurityGroupID": {
                    "default": "Bastion Security Group ID"
                },
                "KeyPairName": {
                    "default": "SSH Key Name"
                },
                "OperatorEmail": {
                    "default": "Operator Email"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 ID"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },

                "S3BucketName": {
                    "default": "S3 Bucket Name"
                },
                "VPCID": {
                    "default": "VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "GenericSoftwareInstanceType": {
            "AllowedValues": [
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Generic Software instances (Share + Repository)",
            "Type": "String"
        },
        "GenericSoftwareNodesDesiredCapacity": {
            "Default": "2",
            "Description": "The desired capacity for the Generic Software nodes Auto Scaling group",
            "Type": "String"
        },
        "GenericSoftwareNodesMaxSize": {
            "Default": "4",
            "Description": "The maximum size of the Auto Scaling group",
            "Type": "String"
        },
        "GenericSoftwareNodesMinSize": {
            "Default": "2",
            "Description": "The minimum size of the Auto Scaling group",
            "Type": "String"
        },

        "BastionSecurityGroupID": {
            "Description": "ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },

        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "OperatorEmail": {
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address.",
            "Description": "Email address that notifications of any scaling operations will be sent to",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the Software (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the Software (e.g., subnet-b1f432cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "generic/services/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },

        "S3BucketName": {
            "AllowedPattern": "^[a-z0-9][a-z0-9-.]*$",
            "Default": "type-unique-value-here-in-lowercase",
            "Description": "Name of the S3 bucket that will be created for your software to store data. Enter a unique name that does not include uppercase characters.",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "SoftwareAMILookupKey": "Marketplace AMI Info"
            },
            "ap-northeast-1": {
                "SoftwareAMILookupKey": ""
            },
            "ap-northeast-2": {
                "SoftwareAMILookupKey": ""
            },
            "ap-south-1": {
                "SoftwareAMILookupKey": ""
            },
            "ap-southeast-1": {
                "SoftwareAMILookupKey": ""
            },
            "ap-southeast-2": {
                "SoftwareAMILookupKey": ""
            },
            "ca-central-1": {
                "SoftwareAMILookupKey": ""
            },
            "eu-central-1": {
                "SoftwareAMILookupKey": ""
            },
            "eu-west-1": {
                "SoftwareAMILookupKey": ""
            },
            "eu-west-2": {
                "SoftwareAMILookupKey": ""
            },
            "sa-east-1": {
                "SoftwareAMILookupKey": ""
            },
            "us-east-1": {
                "SoftwareAMILookupKey": ""
            },
            "us-east-2": {
                "SoftwareAMILookupKey": ""
            },
            "us-west-1": {
                "SoftwareAMILookupKey": ""
            },
            "us-west-2": {
                "SoftwareAMILookupKey": ""
            }
        },
        "S3EndPoints": {
            "ap-northeast-1": {
                "endpoint": "s3-ap-northeast-1.amazonaws.com"
            },
            "ap-northeast-2": {
                "endpoint": "s3-ap-northeast-2.amazonaws.com"
            },
            "ap-south-1": {
                "endpoint": "s3-ap-south-1.amazonaws.com"
            },
            "ap-southeast-1": {
                "endpoint": "s3-ap-southeast-1.amazonaws.com"
            },
            "ap-southeast-2": {
                "endpoint": "s3-ap-southeast-2.amazonaws.com"
            },
            "ca-central-1": {
                "endpoint": "s3-ca-central-1.amazonaws.com"
            },
            "eu-central-1": {
                "endpoint": "s3-eu-central-1.amazonaws.com"
            },
            "eu-west-1": {
                "endpoint": "s3-eu-west-1.amazonaws.com"
            },
            "eu-west-2": {
                "endpoint": "s3-eu-west-2.amazonaws.com"
            },
            "sa-east-1": {
                "endpoint": "s3-sa-east-1.amazonaws.com"
            },
            "us-east-1": {
                "endpoint": "s3-external-1.amazonaws.com"
            },
            "us-east-2": {
                "endpoint": "s3-us-east-2.amazonaws.com"
            },
            "us-west-1": {
                "endpoint": "s3-us-west-1.amazonaws.com"
            },
            "us-west-2": {
                "endpoint": "s3-us-west-2.amazonaws.com"
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "AppCookieStickinessPolicy": [
                    {
                        "CookieName": "dummy",
                        "PolicyName": "GenericSoftwareSetup"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "GenericSoftwareSetup"
                        ]
                    }
                ],
                "CrossZone": "true",
                "HealthCheck": {
                    "Target": "TCP:80",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "GenericSoftwareSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:cloudformation:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":stack/",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:CreateTags*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "s3:ListAllMyBuckets"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                ""
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:CreateBucket",
                                        "s3:DeleteBucket"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "-928274"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },

        "GenericSoftwareSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the GenericSoftware One instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        }
                    }
                ]
            }
        },
        "GenericSoftwareASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {

                        }
                    },
                    "Configure": {

                    }
                },

            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "SoftwareAMILookupKey"
                    ]
                },
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "GenericSoftwareInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "GenericSoftwareSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || sleep 10\n",
                                "/usr/bin/cfn-init",
                                "    --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "    --resource GenericSoftwareASLaunchConfig",
                                "    --configsets InstallAndRun",
                                "    --region     ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/usr/bin/cfn-signal -e $? ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource GenericSoftwareAutoScalingGroup",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "GenericSoftwareScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "GenericSoftwareAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            }
        },
        "GenericSoftwareScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "GenericSoftwareAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 60% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "60",
                "AlarmActions": [
                    {
                        "Ref": "GenericSoftwareScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "GenericSoftwareAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 40% for 30 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "30",
                "Threshold": "40",
                "AlarmActions": [
                    {
                        "Ref": "GenericSoftwareScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "GenericSoftwareAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "GenericSoftwareAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ],
                "Cooldown": "600",
                "DesiredCapacity": {
                    "Ref": "GenericSoftwareNodesDesiredCapacity"
                },
                "HealthCheckGracePeriod": "600",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "GenericSoftwareASLaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "GenericSoftwareNodesMaxSize"
                },
                "MinSize": {
                    "Ref": "GenericSoftwareNodesMinSize"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                        "autoscaling:TEST_NOTIFICATION"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "GenericSoftware Server cluster node",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "GenericSoftwareNodesDesiredCapacity"
                    },
                    "Timeout": "PT2H"
                }
            }
        },

        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": {
                    "Ref": "S3BucketName"
                },
                "AccessControl": "BucketOwnerFullControl"
            }
        }
    },
    "Outputs": {
        "GenericSoftwareServerOutput": {
            "Description": "",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        },
                        "/share"
                    ]
                ]
            }
        },
        "GenericSoftwareAwsReadMoreInfo": {
            "Description": "For more information and details visit:",
            "Value": "https://github.com/aws-quickstart/quickstart-generic-service"
        }
    }
}
